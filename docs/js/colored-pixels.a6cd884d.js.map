{"version":3,"sources":["webpack:///./src/views/ColoredPixels.vue?ba05","webpack:///src/views/ColoredPixels.vue","webpack:///./src/views/ColoredPixels.vue?a6e1","webpack:///./src/views/ColoredPixels.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","ref","staticClass","_l","row","key","attrs","squareEdge","col","squareColor","staticRenderFns","name","data","numRows","numColumns","mounted","getNumOfRowColumn","getSquareColor","methods","Math","ceil","rootWidth","rootHeight","getRgbSingleValue","round","random","randomColor","vm","$forceUpdate","setInterval","component"],"mappings":"uHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,IAAI,QAAQ,CAACF,EAAG,MAAM,CAACG,YAAY,qBAAqBP,EAAIQ,GAAIR,EAAW,SAAE,SAASS,GAAK,OAAOL,EAAG,IAAI,CAACM,IAAID,EAAM,SAASE,MAAM,CAAC,UAAY,cAC/OX,EAAIY,WAAa,EAClB,KACCZ,EAAIY,YAAcH,EAAM,GAAK,GAC9B,MAAMT,EAAIQ,GAAIR,EAAc,YAAE,SAASa,GAAK,OAAOT,EAAG,OAAO,CAACM,IAAIG,EAAM,QAAQF,MAAM,CAAC,EAAIX,EAAIY,YAAcC,EAAM,IAAK,EAAIb,EAAIY,WAAa,EAAE,MAAQZ,EAAIY,WAAW,OAASZ,EAAIY,WAAW,KAAOZ,EAAIc,YAAYL,EAAM,GAAGI,EAAM,SAAQ,MAAK,MACvPE,EAAkB,G,iCC0BtB,GACEC,KAAM,gBACNC,KAFF,WAGI,MAAO,CACLC,QAAS,EACTC,WAAY,EACZP,WAAY,GACZE,YAAa,CAAC,MAGlBM,QAVF,WAWInB,KAAKoB,oBACLpB,KAAKqB,kBAEPC,QAAS,CACPF,kBADJ,WAEM,IAAN,8BACA,+BAEMpB,KAAKkB,WAAaK,KAAKC,KAAKC,EAAYzB,KAAKW,YAC7CX,KAAKiB,QAAUM,KAAKC,KAAKE,EAAa1B,KAAKW,aAE7CU,eARJ,WASM,IAAN,OACM,SAASM,IACP,OAAOJ,KAAKK,MAAM,IAAML,KAAKM,UAE/B,SAASC,IACP,IAAK,IAAb,qBACUC,EAAGlB,YAAYL,GAAO,GACtB,IAAK,IAAf,uBACYuB,EAAGlB,YAAYL,GAAKI,GAAO,IAAvC,4DACA,IADA,0CAEA,IAFA,MAGA,MACA,SAGQmB,EAAGC,eAGLF,IACAG,aAAY,WACVH,MACR,QC3EuV,I,YCOnVI,EAAY,eACd,EACApC,EACAgB,GACA,EACA,KACA,KACA,MAIa,aAAAoB,E","file":"js/colored-pixels.a6cd884d.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:\"root\"},[_c('svg',{staticClass:\"h-screen w-screen\"},_vm._l((_vm.numRows),function(row){return _c('g',{key:row + '_g_row',attrs:{\"transform\":'translate(' +\n          -_vm.squareEdge / 2 +\n          ',' +\n          (_vm.squareEdge * (row - 1) - 5) +\n          ')'}},_vm._l((_vm.numColumns),function(col){return _c('rect',{key:col + '_rect',attrs:{\"x\":_vm.squareEdge * (col - 0.5),\"y\":_vm.squareEdge / 2,\"width\":_vm.squareEdge,\"height\":_vm.squareEdge,\"fill\":_vm.squareColor[row - 1][col - 1]}})}),0)}),0)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div ref=\"root\">\n    <svg class=\"h-screen w-screen\">\n      <g\n        v-for=\"row in numRows\"\n        :key=\"row + '_g_row'\"\n        :transform=\"\n          'translate(' +\n            -squareEdge / 2 +\n            ',' +\n            (squareEdge * (row - 1) - 5) +\n            ')'\n        \"\n      >\n        <rect\n          v-for=\"col in numColumns\"\n          :key=\"col + '_rect'\"\n          :x=\"squareEdge * (col - 0.5)\"\n          :y=\"squareEdge / 2\"\n          :width=\"squareEdge\"\n          :height=\"squareEdge\"\n          :fill=\"squareColor[row - 1][col - 1]\"\n        />\n      </g>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport color from 'color'\n\nexport default {\n  name: 'ColoredPixels',\n  data() {\n    return {\n      numRows: 0,\n      numColumns: 0,\n      squareEdge: 10,\n      squareColor: [[]],\n    }\n  },\n  mounted() {\n    this.getNumOfRowColumn()\n    this.getSquareColor()\n  },\n  methods: {\n    getNumOfRowColumn() {\n      const rootWidth = this.$refs.root.offsetWidth\n      const rootHeight = this.$refs.root.offsetHeight\n\n      this.numColumns = Math.ceil(rootWidth / this.squareEdge)\n      this.numRows = Math.ceil(rootHeight / this.squareEdge)\n    },\n    getSquareColor() {\n      const vm = this\n      function getRgbSingleValue() {\n        return Math.round(255 * Math.random())\n      }\n      function randomColor() {\n        for (let row = 0; row < vm.numRows; row++) {\n          vm.squareColor[row] = []\n          for (let col = 0; col < vm.numColumns; col++) {\n            vm.squareColor[row][col] = color(`rgb(${getRgbSingleValue()},\n                            ${getRgbSingleValue()},\n                            ${getRgbSingleValue()})`)\n              .rgb()\n              .string()\n          }\n        }\n        vm.$forceUpdate()\n      }\n\n      randomColor()\n      setInterval(function() {\n        randomColor()\n      }, 2000)\n    },\n  },\n}\n</script>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ColoredPixels.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ColoredPixels.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ColoredPixels.vue?vue&type=template&id=4e734a05&\"\nimport script from \"./ColoredPixels.vue?vue&type=script&lang=js&\"\nexport * from \"./ColoredPixels.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}